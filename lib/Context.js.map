{"version":3,"sources":["../src/Context.js"],"names":["Context","ctx","x","y","paths","reverse","width","height","path","Path2D","rect","clearRect","push","fill","select","stroke","text","maxWidth","mtext","measureText","fillText","undefined","strokeText","lineWidth","val","lineCap","lineJoin","miterLimit","getLineDash","setLineDash","lineDashOffset","font","textAlign","textBaseline","direction","fillStyle","strokeStyle","x0","y0","x1","y1","createLinearGradient","r0","r1","createRadialGradient","image","repetition","createPattern","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","fillRule","nativePath","arg1","arg2","drawFocusIfNeeded","scrollPathIntoView","isPointInPath","isPointInStroke"],"mappings":"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","file":"Context.js","sourcesContent":["import Path from './Path';\r\n\r\nexport default class Context {\r\n    constructor(ctx, x, y){\r\n        this.ctx = ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.paths = [];\r\n    }\r\n\r\n    _getPaths(){\r\n        return this.paths.reverse();\r\n    }\r\n\r\n    createPath(){\r\n        return new Path(this);\r\n    }\r\n\r\n    // Drawing rectangles\r\n\r\n    clearRect(x, y, width, height){\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.clearRect(this.x + x, this.y + y, width, height);\r\n        this.paths.push([false, path]);\r\n    }\r\n\r\n    fillRect(x, y, width, height){\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.fill(path);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    strokeRect(x, y, width, height, select = false){\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.stroke(path);\r\n        if(select){\r\n            this.paths.push([true, path]);\r\n        }\r\n    }\r\n\r\n    // Drawing text\r\n\r\n    fillText(text, x, y, maxWidth = null){\r\n        let mtext = this.ctx.measureText(text);\r\n        this.ctx.fillText(text, x, y, maxWidth);\r\n        let path = new Path2D();\r\n        let width = mtext.width;\r\n        if(maxWidth != undefined && maxWidth < width){\r\n            width = maxWidth;\r\n        }\r\n        path.rect(x, y, width, mtext.height);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    strokeText(text, x, y, maxWidth = null){\r\n        let mtext = this.ctx.measureText(text);\r\n        this.ctx.strokeText(text, x, y, maxWidth);\r\n        let path = new Path2D();\r\n        let width = mtext.width;\r\n        if(maxWidth != undefined && maxWidth < width){\r\n            width = maxWidth;\r\n        }\r\n        path.rect(x, y, width, mtext.height);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    measureText(text){\r\n        return this.measureText(text);\r\n    }\r\n\r\n    // Line styles\r\n\r\n    getLineWidth(){\r\n        return this.ctx.lineWidth;\r\n    }\r\n\r\n    setLineWidth(val){\r\n        this.ctx.lineWidth = val;\r\n    }\r\n\r\n    getLineCap(){\r\n        return this.ctx.lineCap;\r\n    }\r\n\r\n    setLineCap(val){\r\n        this.ctx.lineCap = val;\r\n    }\r\n\r\n    getLineJoin(){\r\n        return this.ctx.lineJoin;\r\n    }\r\n\r\n    setLineJoin(val){\r\n        this.ctx.lineJoin = val;\r\n    }\r\n\r\n    getMiterLimit(){\r\n        return this.ctx.miterLimit;\r\n    }\r\n\r\n    setMiterLimit(val){\r\n        this.ctx.miterLimit = val;\r\n    }\r\n\r\n    getLineDash(){\r\n        return this.ctx.getLineDash();\r\n    }\r\n\r\n    setLineDash(val){\r\n        this.ctx.setLineDash(val);\r\n    }\r\n\r\n    getLineDashOffset(){\r\n        return this.ctx.lineDashOffset;\r\n    }\r\n\r\n    setLineDashOffset(val){\r\n        this.ctx.lineDashOffset = val;\r\n    }\r\n\r\n    // Text styles\r\n\r\n    getFont(){\r\n        return this.ctx.font;\r\n    }\r\n\r\n    setFont(val){\r\n        this.ctx.font = val;\r\n    }\r\n\r\n    getTextAlign(){\r\n        return this.ctx.textAlign;\r\n    }\r\n\r\n    setTextAlign(val){\r\n        this.ctx.textAlign = val;\r\n    }\r\n\r\n    getTextBaseline(){\r\n        return this.ctx.textBaseline;\r\n    }\r\n\r\n    setTextBaseline(val){\r\n        this.ctx.textBaseline = val;\r\n    }\r\n\r\n    getDirection(){\r\n        return this.ctx.direction;\r\n    }\r\n\r\n    setDirection(val){\r\n        this.ctx.direction = val;\r\n    }   \r\n\r\n    // Fill and stroke styles\r\n\r\n    getFillStyle(){\r\n        return this.ctx.fillStyle;\r\n    }\r\n\r\n    setFillStyle(val){\r\n        this.ctx.fillStyle = val;\r\n    }\r\n\r\n    getStrokeStyle(){\r\n        return this.ctx.strokeStyle;\r\n    }\r\n\r\n    setStrokeStyle(val){\r\n        this.ctx.strokeStyle = val;\r\n    }\r\n\r\n    // Gradients and patterns\r\n\r\n    createLinearGradient(x0, y0, x1, y1){\r\n        this.ctx.createLinearGradient(this.x + x0, this.y + y0, this.x + x1, this.y + y1);\r\n    }\r\n\r\n    createRadialGradient(x0, y0, r0, x1, y1, r1){\r\n        this.ctx.createRadialGradient(this.x + x0, this.y + y0, r0, this.x + x1, this.y + y1, r1);\r\n    }\r\n\r\n    createPattern(image, repetition){\r\n        this.ctx.createPattern(image, repetition);\r\n    }\r\n\r\n    // Shadows\r\n\r\n    getShadowBlur(){\r\n        return this.ctx.shadowBlur;\r\n    }\r\n\r\n    setShadowBlur(val){\r\n        this.ctx.shadowBlur = val;\r\n    }\r\n\r\n    getShadowColor(){\r\n        return this.ctx.shadowColor;\r\n    }\r\n\r\n    setShadowColor(val){\r\n        this.ctx.shadowColor = val;\r\n    }\r\n\r\n    getShadowOffsetX(){\r\n        return this.ctx.shadowOffsetX;\r\n    }\r\n\r\n    setShadowOffsetX(val){\r\n        this.ctx.shadowOffsetX = val;\r\n    }\r\n\r\n    getShadowOffsetY(){\r\n        return this.ctx.shadowOffsetY;\r\n    }\r\n\r\n    setShadowOffsetY(val){\r\n        this.ctx.shadowOffsetY = val;\r\n    }\r\n\r\n    // Paths\r\n\r\n    // https://github.com/google/canvas-5-polyfill\r\n\r\n    // With this polyfill installed, the calls to context.clip(path), \r\n    // context.isPointInPath(path, x, y) and context.isPointInStroke(path, x, y) \r\n    // all affect the current path.\r\n\r\n    // When using the polyfill the best approach is to move strictly to using \r\n    // Path2D objects to describe paths and then use the path enabled calls on \r\n    // the context, such as ctx.fill(path). Do not mix and match such calls.\r\n\r\n    // Drawing paths\r\n\r\n    fill(path, fillRule){\r\n        path = path.nativePath;\r\n        this.ctx.fill(path, fillRule);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    stroke(path){\r\n        path = path.nativePath;\r\n        this.ctx.stroke(path);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    drawFocusIfNeeded(arg1, arg2){\r\n        this.ctx.drawFocusIfNeeded(arg1, arg2);\r\n    }\r\n\r\n    scrollPathIntoView(path){\r\n        path = path.nativePath;\r\n        this.ctx.scrollPathIntoView(path);\r\n    }\r\n\r\n    clip(path, fillRule){\r\n        throw 'Not implemented';\r\n    }\r\n\r\n    isPointInPath(path, x, y, fillRule){\r\n        path = path.nativePath;\r\n        this.ctx.isPointInPath(path, this.x + x, this.y + y, fillRule);\r\n    }\r\n\r\n    isPointInStroke(path, x, y){\r\n        path = path.nativePath;\r\n        this.ctx.isPointInStroke(path, this.x + x, this.y + y);\r\n    }\r\n\r\n}"]}