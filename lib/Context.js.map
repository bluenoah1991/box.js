{"version":3,"sources":["../src/Context.js"],"names":["Context","ctx","x","y","zoom","paths","reverse","map","arguments","val","bind","scale","width","height","_zoom","path","Path2D","rect","clearRect","push","fill","select","stroke","text","maxWidth","mtext","measureText","fillText","undefined","strokeText","lineWidth","lineCap","lineJoin","miterLimit","getLineDash","setLineDash","lineDashOffset","font","textAlign","textBaseline","direction","fillStyle","strokeStyle","x0","y0","x1","y1","createLinearGradient","r0","r1","createRadialGradient","image","repetition","createPattern","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","fillRule","nativePath","arg1","arg2","drawFocusIfNeeded","scrollPathIntoView","isPointInPath","isPointInStroke"],"mappings":"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","file":"Context.js","sourcesContent":["import _ from 'lodash';\r\nimport Path from './Path';\r\n\r\nexport default class Context {\r\n    constructor(ctx, x, y, zoom){\r\n        this.ctx = ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.zoom = zoom;\r\n        this.paths = [];\r\n    }\r\n\r\n    _getPaths(){\r\n        return this.paths.reverse();\r\n    }\r\n\r\n    _zoom(){\r\n        return _.map(arguments, function(val){\r\n            return val * this.zoom;\r\n        }.bind(this));\r\n    }\r\n\r\n    createPath(){\r\n        return new Path(this);\r\n    }\r\n\r\n    scale(x, y){\r\n        this.ctx.scale(x, y);\r\n    }\r\n\r\n    // Drawing rectangles\r\n\r\n    clearRect(x, y, width, height){\r\n        [x, y, width, height] = this._zoom(x, y, width, height);\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.clearRect(this.x + x, this.y + y, width, height);\r\n        this.paths.push([false, path]);\r\n    }\r\n\r\n    fillRect(x, y, width, height){\r\n        [x, y, width, height] = this._zoom(x, y, width, height);\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.fill(path);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    strokeRect(x, y, width, height, select = false){\r\n        [x, y, width, height] = this._zoom(x, y, width, height);\r\n        let path = new Path2D();\r\n        path.rect(this.x + x, this.y + y, width, height);\r\n        this.ctx.stroke(path);\r\n        if(select){\r\n            this.paths.push([true, path]);\r\n        }\r\n    }\r\n\r\n    // Drawing text\r\n\r\n    fillText(text, x, y, maxWidth = null){\r\n        [x, y, maxWidth] = this._zoom(x, y, maxWidth);\r\n        let mtext = this.ctx.measureText(text);\r\n        this.ctx.fillText(text, x, y, maxWidth);\r\n        let path = new Path2D();\r\n        let width = mtext.width;\r\n        if(maxWidth != undefined && maxWidth < width){\r\n            width = maxWidth;\r\n        }\r\n        path.rect(x, y, width, mtext.height);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    strokeText(text, x, y, maxWidth = null){\r\n        [x, y, maxWidth] = this._zoom(x, y, maxWidth);\r\n        let mtext = this.ctx.measureText(text);\r\n        this.ctx.strokeText(text, x, y, maxWidth);\r\n        let path = new Path2D();\r\n        let width = mtext.width;\r\n        if(maxWidth != undefined && maxWidth < width){\r\n            width = maxWidth;\r\n        }\r\n        path.rect(x, y, width, mtext.height);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    measureText(text){\r\n        return this.measureText(text);\r\n    }\r\n\r\n    // Line styles\r\n\r\n    getLineWidth(){\r\n        return this.ctx.lineWidth;\r\n    }\r\n\r\n    setLineWidth(val){\r\n        this.ctx.lineWidth = val;\r\n    }\r\n\r\n    getLineCap(){\r\n        return this.ctx.lineCap;\r\n    }\r\n\r\n    setLineCap(val){\r\n        this.ctx.lineCap = val;\r\n    }\r\n\r\n    getLineJoin(){\r\n        return this.ctx.lineJoin;\r\n    }\r\n\r\n    setLineJoin(val){\r\n        this.ctx.lineJoin = val;\r\n    }\r\n\r\n    getMiterLimit(){\r\n        return this.ctx.miterLimit;\r\n    }\r\n\r\n    setMiterLimit(val){\r\n        this.ctx.miterLimit = val;\r\n    }\r\n\r\n    getLineDash(){\r\n        return this.ctx.getLineDash();\r\n    }\r\n\r\n    setLineDash(val){\r\n        this.ctx.setLineDash(val);\r\n    }\r\n\r\n    getLineDashOffset(){\r\n        return this.ctx.lineDashOffset;\r\n    }\r\n\r\n    setLineDashOffset(val){\r\n        this.ctx.lineDashOffset = val;\r\n    }\r\n\r\n    // Text styles\r\n\r\n    getFont(){\r\n        return this.ctx.font;\r\n    }\r\n\r\n    setFont(val){\r\n        this.ctx.font = val;\r\n    }\r\n\r\n    getTextAlign(){\r\n        return this.ctx.textAlign;\r\n    }\r\n\r\n    setTextAlign(val){\r\n        this.ctx.textAlign = val;\r\n    }\r\n\r\n    getTextBaseline(){\r\n        return this.ctx.textBaseline;\r\n    }\r\n\r\n    setTextBaseline(val){\r\n        this.ctx.textBaseline = val;\r\n    }\r\n\r\n    getDirection(){\r\n        return this.ctx.direction;\r\n    }\r\n\r\n    setDirection(val){\r\n        this.ctx.direction = val;\r\n    }   \r\n\r\n    // Fill and stroke styles\r\n\r\n    getFillStyle(){\r\n        return this.ctx.fillStyle;\r\n    }\r\n\r\n    setFillStyle(val){\r\n        this.ctx.fillStyle = val;\r\n    }\r\n\r\n    getStrokeStyle(){\r\n        return this.ctx.strokeStyle;\r\n    }\r\n\r\n    setStrokeStyle(val){\r\n        this.ctx.strokeStyle = val;\r\n    }\r\n\r\n    // Gradients and patterns\r\n\r\n    createLinearGradient(x0, y0, x1, y1){\r\n        [x0, y0, x1, y1] = this._zoom(x0, y0, x1, y1);\r\n        this.ctx.createLinearGradient(this.x + x0, this.y + y0, this.x + x1, this.y + y1);\r\n    }\r\n\r\n    createRadialGradient(x0, y0, r0, x1, y1, r1){\r\n        [x0, y0, r0, x1, y1, r1] = this._zoom(x0, y0, r0, x1, y1, r1);\r\n        this.ctx.createRadialGradient(this.x + x0, this.y + y0, r0, this.x + x1, this.y + y1, r1);\r\n    }\r\n\r\n    createPattern(image, repetition){\r\n        this.ctx.createPattern(image, repetition);\r\n    }\r\n\r\n    // Shadows\r\n\r\n    getShadowBlur(){\r\n        return this.ctx.shadowBlur;\r\n    }\r\n\r\n    setShadowBlur(val){\r\n        this.ctx.shadowBlur = val;\r\n    }\r\n\r\n    getShadowColor(){\r\n        return this.ctx.shadowColor;\r\n    }\r\n\r\n    setShadowColor(val){\r\n        this.ctx.shadowColor = val;\r\n    }\r\n\r\n    getShadowOffsetX(){\r\n        return this.ctx.shadowOffsetX;\r\n    }\r\n\r\n    setShadowOffsetX(val){\r\n        this.ctx.shadowOffsetX = val;\r\n    }\r\n\r\n    getShadowOffsetY(){\r\n        return this.ctx.shadowOffsetY;\r\n    }\r\n\r\n    setShadowOffsetY(val){\r\n        this.ctx.shadowOffsetY = val;\r\n    }\r\n\r\n    // Paths\r\n\r\n    // https://github.com/google/canvas-5-polyfill\r\n\r\n    // With this polyfill installed, the calls to context.clip(path), \r\n    // context.isPointInPath(path, x, y) and context.isPointInStroke(path, x, y) \r\n    // all affect the current path.\r\n\r\n    // When using the polyfill the best approach is to move strictly to using \r\n    // Path2D objects to describe paths and then use the path enabled calls on \r\n    // the context, such as ctx.fill(path). Do not mix and match such calls.\r\n\r\n    // Drawing paths\r\n\r\n    fill(path, fillRule){\r\n        path = path.nativePath;\r\n        this.ctx.fill(path, fillRule);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    stroke(path){\r\n        path = path.nativePath;\r\n        this.ctx.stroke(path);\r\n        this.paths.push([true, path]);\r\n    }\r\n\r\n    drawFocusIfNeeded(arg1, arg2){\r\n        this.ctx.drawFocusIfNeeded(arg1, arg2);\r\n    }\r\n\r\n    scrollPathIntoView(path){\r\n        path = path.nativePath;\r\n        this.ctx.scrollPathIntoView(path);\r\n    }\r\n\r\n    clip(path, fillRule){\r\n        throw 'Not implemented';\r\n    }\r\n\r\n    isPointInPath(path, x, y, fillRule){\r\n        [x, y] = this._zoom(x, y);\r\n        path = path.nativePath;\r\n        this.ctx.isPointInPath(path, this.x + x, this.y + y, fillRule);\r\n    }\r\n\r\n    isPointInStroke(path, x, y){\r\n        [x, y] = this._zoom(x, y);\r\n        path = path.nativePath;\r\n        this.ctx.isPointInStroke(path, this.x + x, this.y + y);\r\n    }\r\n\r\n}"]}